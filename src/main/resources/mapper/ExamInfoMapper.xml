<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.gpnusz.ucloudteach.mapper.ExamInfoMapper">
  <resultMap id="BaseResultMap" type="cn.gpnusz.ucloudteach.entity.ExamInfo">
    <result column="id" jdbcType="BIGINT" property="id" />
    <result column="student_id" jdbcType="BIGINT" property="studentId" />
    <result column="score" jdbcType="INTEGER" property="score" />
    <result column="paper_id" jdbcType="BIGINT" property="paperId" />
    <result column="check_flag" jdbcType="BIT" property="checkFlag" />
    <result column="check_id" jdbcType="BIGINT" property="checkId" />
    <result column="right_count" jdbcType="INTEGER" property="rightCount" />
    <result column="error_count" jdbcType="INTEGER" property="errorCount" />
    <result column="status" jdbcType="BIT" property="status" />
    <result column="exam_time" jdbcType="INTEGER" property="examTime" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="cn.gpnusz.ucloudteach.entity.ExamInfo">
    <result column="student_answer" jdbcType="LONGVARCHAR" property="studentAnswer" />
    <result column="check_list" jdbcType="LONGVARCHAR" property="checkList" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, student_id, score, paper_id, check_flag, check_id, right_count, error_count, 
    `status`, exam_time, create_time
  </sql>
  <sql id="Blob_Column_List">
    student_answer, check_list
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="cn.gpnusz.ucloudteach.entity.ExamInfoExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from exam_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="cn.gpnusz.ucloudteach.entity.ExamInfoExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from exam_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="cn.gpnusz.ucloudteach.entity.ExamInfoExample">
    delete from exam_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.gpnusz.ucloudteach.entity.ExamInfo">
    insert into exam_info (id, student_id, score, 
      paper_id, check_flag, check_id, 
      right_count, error_count, `status`, 
      exam_time, create_time, student_answer, 
      check_list)
    values (#{id,jdbcType=BIGINT}, #{studentId,jdbcType=BIGINT}, #{score,jdbcType=INTEGER}, 
      #{paperId,jdbcType=BIGINT}, #{checkFlag,jdbcType=BIT}, #{checkId,jdbcType=BIGINT}, 
      #{rightCount,jdbcType=INTEGER}, #{errorCount,jdbcType=INTEGER}, #{status,jdbcType=BIT}, 
      #{examTime,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, #{studentAnswer,jdbcType=LONGVARCHAR}, 
      #{checkList,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="cn.gpnusz.ucloudteach.entity.ExamInfo">
    insert into exam_info
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="studentId != null">
        student_id,
      </if>
      <if test="score != null">
        score,
      </if>
      <if test="paperId != null">
        paper_id,
      </if>
      <if test="checkFlag != null">
        check_flag,
      </if>
      <if test="checkId != null">
        check_id,
      </if>
      <if test="rightCount != null">
        right_count,
      </if>
      <if test="errorCount != null">
        error_count,
      </if>
      <if test="status != null">
        `status`,
      </if>
      <if test="examTime != null">
        exam_time,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="studentAnswer != null">
        student_answer,
      </if>
      <if test="checkList != null">
        check_list,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="studentId != null">
        #{studentId,jdbcType=BIGINT},
      </if>
      <if test="score != null">
        #{score,jdbcType=INTEGER},
      </if>
      <if test="paperId != null">
        #{paperId,jdbcType=BIGINT},
      </if>
      <if test="checkFlag != null">
        #{checkFlag,jdbcType=BIT},
      </if>
      <if test="checkId != null">
        #{checkId,jdbcType=BIGINT},
      </if>
      <if test="rightCount != null">
        #{rightCount,jdbcType=INTEGER},
      </if>
      <if test="errorCount != null">
        #{errorCount,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        #{status,jdbcType=BIT},
      </if>
      <if test="examTime != null">
        #{examTime,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="studentAnswer != null">
        #{studentAnswer,jdbcType=LONGVARCHAR},
      </if>
      <if test="checkList != null">
        #{checkList,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.gpnusz.ucloudteach.entity.ExamInfoExample" resultType="java.lang.Long">
    select count(*) from exam_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update exam_info
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.studentId != null">
        student_id = #{record.studentId,jdbcType=BIGINT},
      </if>
      <if test="record.score != null">
        score = #{record.score,jdbcType=INTEGER},
      </if>
      <if test="record.paperId != null">
        paper_id = #{record.paperId,jdbcType=BIGINT},
      </if>
      <if test="record.checkFlag != null">
        check_flag = #{record.checkFlag,jdbcType=BIT},
      </if>
      <if test="record.checkId != null">
        check_id = #{record.checkId,jdbcType=BIGINT},
      </if>
      <if test="record.rightCount != null">
        right_count = #{record.rightCount,jdbcType=INTEGER},
      </if>
      <if test="record.errorCount != null">
        error_count = #{record.errorCount,jdbcType=INTEGER},
      </if>
      <if test="record.status != null">
        `status` = #{record.status,jdbcType=BIT},
      </if>
      <if test="record.examTime != null">
        exam_time = #{record.examTime,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.studentAnswer != null">
        student_answer = #{record.studentAnswer,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.checkList != null">
        check_list = #{record.checkList,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update exam_info
    set id = #{record.id,jdbcType=BIGINT},
      student_id = #{record.studentId,jdbcType=BIGINT},
      score = #{record.score,jdbcType=INTEGER},
      paper_id = #{record.paperId,jdbcType=BIGINT},
      check_flag = #{record.checkFlag,jdbcType=BIT},
      check_id = #{record.checkId,jdbcType=BIGINT},
      right_count = #{record.rightCount,jdbcType=INTEGER},
      error_count = #{record.errorCount,jdbcType=INTEGER},
      `status` = #{record.status,jdbcType=BIT},
      exam_time = #{record.examTime,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      student_answer = #{record.studentAnswer,jdbcType=LONGVARCHAR},
      check_list = #{record.checkList,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update exam_info
    set id = #{record.id,jdbcType=BIGINT},
      student_id = #{record.studentId,jdbcType=BIGINT},
      score = #{record.score,jdbcType=INTEGER},
      paper_id = #{record.paperId,jdbcType=BIGINT},
      check_flag = #{record.checkFlag,jdbcType=BIT},
      check_id = #{record.checkId,jdbcType=BIGINT},
      right_count = #{record.rightCount,jdbcType=INTEGER},
      error_count = #{record.errorCount,jdbcType=INTEGER},
      `status` = #{record.status,jdbcType=BIT},
      exam_time = #{record.examTime,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
</mapper>